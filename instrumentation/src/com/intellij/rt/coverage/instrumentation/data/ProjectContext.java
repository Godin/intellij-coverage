/*
 * Copyright 2000-2024 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.intellij.rt.coverage.instrumentation.data;

import com.intellij.rt.coverage.data.ClassData;
import com.intellij.rt.coverage.data.FileMapData;
import com.intellij.rt.coverage.data.IgnoredStorage;
import com.intellij.rt.coverage.data.ProjectData;
import com.intellij.rt.coverage.data.instructions.InstructionsUtil;
import com.intellij.rt.coverage.instrumentation.InstrumentationOptions;
import com.intellij.rt.coverage.util.ClassNameUtil;
import com.intellij.rt.coverage.util.StringsPool;
import com.intellij.rt.coverage.util.classFinder.ClassFinder;

import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.regex.Pattern;

public class ProjectContext {
  private final InstrumentationOptions myOptions;
  private final ClassFinder myClassFinder;

  private final StringsPool myStringPool = new StringsPool();
  private final IgnoredStorage myIgnoredStorage = new IgnoredStorage();
  private volatile Map<String, FileMapData[]> myLinesMap;

  public ProjectContext(InstrumentationOptions options) {
    this(options, new ClassFinder(options.includePatterns, options.excludePatterns));
  }

  public ProjectContext(InstrumentationOptions options, ClassFinder classFinder) {
    myOptions = options;
    myClassFinder = classFinder;
  }

  public InstrumentationOptions getOptions() {
    return myOptions;
  }

  public IgnoredStorage getIgnoredStorage() {
    return myIgnoredStorage;
  }

  public String getFromPool(String s) {
    return myStringPool.getFromPool(s);
  }

  public Map<String, FileMapData[]> getLinesMap() {
    return myLinesMap;
  }

  public ClassFinder getClassFinder() {
    return myClassFinder;
  }

  /**
   * Apply line mappings: move hits from original line in bytecode to the mapped line.
   */
  public void applyLineMappings(ProjectData projectData) {
    if (myLinesMap == null) return;
    for (Map.Entry<String, FileMapData[]> entry : myLinesMap.entrySet()) {
      final String className = entry.getKey();
      final ClassData classData = projectData.getClassData(className);
      final FileMapData[] fileData = entry.getValue();
      //postpone process main file because its lines would be reset and next files won't be processed correctly
      FileMapData mainData = null;
      for (FileMapData aFileData : fileData) {
        final String mappedClassName = getFromPool(aFileData.getClassName());
        if (mappedClassName.equals(className)) {
          mainData = aFileData;
          continue;
        }
        final ClassData classInfo;
        if (shouldIncludeClass(mappedClassName)) {
          classInfo = projectData.getOrCreateClassData(mappedClassName);
          if (getOptions().isSaveSource && classInfo.getSource() == null) {
            classInfo.setSource(aFileData.getFileName());
          }
        } else {
          // `classData` SMAP may not contain mapping to itself,
          // so it's better to make sure we fairly apply this mapping
          // otherwise `classData` may contain inline generated lines
          classInfo = new ClassData(mappedClassName);
        }
        ClassData.checkLineMappings(aFileData.getLines(), classInfo, classData);
        InstructionsUtil.applyInstructionsSMAP(projectData, aFileData.getLines(), classInfo, classData);
      }

      if (mainData != null) {
        ClassData.checkLineMappings(mainData.getLines(), classData, classData);
        InstructionsUtil.applyInstructionsSMAP(projectData, mainData.getLines(), classData, classData);
      }
    }
  }

  /**
   * Update coverage data internally stored in arrays.
   */
  public void applyHits(ProjectData projectData) {
    for (ClassData data : projectData.getClassesCollection()) {
      data.applyHits();
    }
  }

  public void dropIgnoredLines(ProjectData projectData) {
    for (final ClassData classData : projectData.getClassesCollection()) {
      classData.dropIgnoredLines();
    }
  }

  /**
   * Remove all lines that are generated by inline.
   * Should be called only in case when hits of these lines are out of interest,
   * foe example when analysing unloaded classes.
   */
  public void dropLineMappings(ProjectData projectData) {
    if (myLinesMap == null) return;
    for (Map.Entry<String, FileMapData[]> entry : myLinesMap.entrySet()) {
      final ClassData classData = projectData.getClassData(entry.getKey());
      final FileMapData[] mappings = entry.getValue();
      classData.dropMappedLines(mappings);
      InstructionsUtil.dropMappedLines(projectData, classData.getName(), mappings);
    }
  }

  public void addLineMaps(String className, FileMapData[] fileDatas) {
    if (myLinesMap == null) {
      synchronized (FileMapData.class) {
        if (myLinesMap == null) {
          myLinesMap = new ConcurrentHashMap<String, FileMapData[]>();
        }
      }
    }
    myLinesMap.put(className, fileDatas);
  }

  private boolean shouldIncludeClass(String className) {
    if (ClassNameUtil.matchesPatterns(className, getOptions().excludePatterns)) return false;
    List<Pattern> includePatterns = getOptions().includePatterns;
    return includePatterns == null || includePatterns.isEmpty() || ClassNameUtil.matchesPatterns(className, includePatterns);
  }
}
