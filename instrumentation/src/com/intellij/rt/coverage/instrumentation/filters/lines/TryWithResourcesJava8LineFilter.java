/*
 * Copyright 2000-2024 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.intellij.rt.coverage.instrumentation.filters.lines;

import com.intellij.rt.coverage.instrumentation.data.InstrumentationData;
import org.jetbrains.coverage.gnu.trove.TIntIntHashMap;
import org.jetbrains.coverage.org.objectweb.asm.Handle;
import org.jetbrains.coverage.org.objectweb.asm.Label;
import org.jetbrains.coverage.org.objectweb.asm.Opcodes;

import java.util.HashSet;
import java.util.Set;

/**
 * This is an additional filter for lines generated by java compiler for older versions of java.
 */
public class TryWithResourcesJava8LineFilter extends CoverageFilter {
  private final TIntIntHashMap myCandidates = new TIntIntHashMap();
  private final Set<Label> myCatchStarts = new HashSet<Label>();
  private int myState = 1;
  private boolean myHasInstructions = false;
  private int myCurrentLine = 0;


  @Override
  public boolean isApplicable(InstrumentationData context) {
    return true;
  }

  private void tryRemoveLine() {
    if (myCurrentLine != -1 && !myHasInstructions && (myState == 9)) {
      myContext.removeLine(myCurrentLine);
      myCurrentLine = -1;
    }
  }

  @Override
  public void visitLineNumber(int line, Label start) {
    myCandidates.put(myCurrentLine, myHasInstructions ? -1 : myState);
    tryRemoveLine();
    // do not remove lines that are previously used
    myHasInstructions = myContext.getLineData(line) != null;
    super.visitLineNumber(line, start);
    myCurrentLine = line;

    int previousState = myCandidates.get(myCurrentLine);
    myState = previousState == 0 ? 1 : previousState;
  }

  @Override
  public void visitEnd() {
    tryRemoveLine();
    super.visitEnd();
  }

  @Override
  public void visitTryCatchBlock(Label start, Label end, Label handler, String type) {
    super.visitTryCatchBlock(start, end, handler, type);
    myCatchStarts.add(start);
  }

  @Override
  public void visitLabel(Label label) {
    super.visitLabel(label);
    if (myCatchStarts.contains(label) && myState == 3) {
      myState = 4;
    }
  }

  @Override
  public void visitVarInsn(int opcode, int var) {
    super.visitVarInsn(opcode, var);
    if ((myState == 2 || myState == 4 || myState == 6) && opcode == Opcodes.ASTORE) {
      myState++;
    } else if (myState == 9 && opcode == Opcodes.ASTORE) {
      myState = 5;
    } else if ((myState == 5 || myState == 7) && opcode == Opcodes.ALOAD) {
      myState++;
    } else {
      myHasInstructions = true;
    }
  }

  @Override
  public void visitInsn(int opcode) {
    super.visitInsn(opcode);
    if ((myState == 1 || myState == 4) && opcode == Opcodes.ACONST_NULL) {
      myState = 2;
    } else if (myState == 8 && opcode == Opcodes.ATHROW) {
      myState = 9;
    } else {
      myHasInstructions = true;
    }
  }

  @Override
  public void visitJumpInsn(int opcode, Label label) {
    super.visitJumpInsn(opcode, label);
    myHasInstructions = true;
  }

  @Override
  public void visitMethodInsn(int opcode, String owner, String name, String descriptor, boolean isInterface) {
    super.visitMethodInsn(opcode, owner, name, descriptor, isInterface);
    myHasInstructions = true;
  }

  @Override
  public void visitIntInsn(int opcode, int operand) {
    super.visitIntInsn(opcode, operand);
    myHasInstructions = true;
  }

  @Override
  public void visitFieldInsn(int opcode, String owner, String name, String descriptor) {
    super.visitFieldInsn(opcode, owner, name, descriptor);
    myHasInstructions = true;
  }

  @Override
  public void visitIincInsn(int varIndex, int increment) {
    super.visitIincInsn(varIndex, increment);
    myHasInstructions = true;
  }

  @Override
  public void visitInvokeDynamicInsn(String name, String descriptor, Handle bootstrapMethodHandle, Object... bootstrapMethodArguments) {
    super.visitInvokeDynamicInsn(name, descriptor, bootstrapMethodHandle, bootstrapMethodArguments);
    myHasInstructions = true;
  }

  @Override
  public void visitLookupSwitchInsn(Label dflt, int[] keys, Label[] labels) {
    super.visitLookupSwitchInsn(dflt, keys, labels);
    myHasInstructions = true;
  }

  @Override
  public void visitTypeInsn(int opcode, String type) {
    super.visitTypeInsn(opcode, type);
    myHasInstructions = true;
  }

  @Override
  public void visitMultiANewArrayInsn(String descriptor, int numDimensions) {
    super.visitMultiANewArrayInsn(descriptor, numDimensions);
    myHasInstructions = true;
  }

  @Override
  public void visitTableSwitchInsn(int min, int max, Label dflt, Label... labels) {
    super.visitTableSwitchInsn(min, max, dflt, labels);
    myHasInstructions = true;
  }

  @Override
  public void visitLdcInsn(Object value) {
    super.visitLdcInsn(value);
    myHasInstructions = true;
  }
}
