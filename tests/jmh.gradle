/*
 * Copyright 2000-2018 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: project(":benchmarks").file("jmh.gradle")

ext {
  benchmarkRegexp = 'com\\.intellij\\.rt\\.coverage\\.jmh\\.CoverageAgentBenchmark.*'
  benchmarkIterations = 30
  benchmarkWarmupIterations = 10
  baselineVersion = '1.0.725'
  coverageFile = "coverage.ic"
}

configurations {
  head
  baseline
}

dependencies {
  head project(':instrumentation')
  baseline "$group:$coverage_jar_name:$baselineVersion"
}

def findAgent(Configuration configuration) {
  return configuration.find { it.name.startsWith(coverage_jar_name) }.absolutePath
}

def agentParams(Configuration configuration, boolean branchCoverage) {
  return [
      "-javaagent:${findAgent(configuration)}=${coverageFile} false false false ${!branchCoverage} org.joda.* org.apache.commons.*",
      "-Didea.new.sampling.coverage=true", "-Didea.new.tracing.coverage=true"
  ]
}

def branchCoverage = true

task BaselineCoverage(type: JavaExec) {
  configureCompare(it) { agentParams(configurations.baseline, branchCoverage) }
  clear(it)
}

task HeadCoverage(type: JavaExec) {
  configureCompare(it) { agentParams(configurations.head, branchCoverage) }
  clear(it)
}

task HeadVsBaselineCoverage(type: JavaExec) {
  configureCompareWith(it, { agentParams(configurations.head, branchCoverage) }, BaselineCoverage)
  clear(it)
}

task LineVsBranchCoverage(type: JavaExec) {
  configureCompareWith(it, { agentParams(configurations.head, false) }, HeadCoverage)
  clear(it)
}

def clear(Task task) {
  task.doLast {
    delete(coverageFile)
  }
}
