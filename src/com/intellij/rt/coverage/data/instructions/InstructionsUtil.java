/*
 * Copyright 2000-2022 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.intellij.rt.coverage.data.instructions;

import com.intellij.rt.coverage.data.ClassData;
import com.intellij.rt.coverage.data.FileMapData;
import com.intellij.rt.coverage.data.LineMapData;
import com.intellij.rt.coverage.data.ProjectData;
import com.intellij.rt.coverage.util.ArrayUtil;
import com.intellij.rt.coverage.util.classFinder.ClassFilter;

import java.util.Map;

public class InstructionsUtil {
  public static void merge(ProjectData source, ProjectData target, ClassFilter classFilter) {
    if (!target.isInstructionsCoverageEnabled()) return;
    final Map<String, ClassInstructions> instructions = target.getInstructions();
    for (Map.Entry<String, ClassInstructions> entry : source.getInstructions().entrySet()) {
      final String className = entry.getKey();
      if (classFilter != null && !classFilter.shouldInclude(className)) continue;
      final ClassInstructions mergedInstructions = entry.getValue();
      ClassInstructions classInstructions = instructions.get(className);
      if (classInstructions == null) {
        classInstructions = new ClassInstructions();
        instructions.put(className, classInstructions);
      }
      classInstructions.merge(mergedInstructions);
    }
  }

  public static void applyInstructionsSMAP(ProjectData projectData, LineMapData[] linesMap, ClassData sourceClass, ClassData targetClass) {
    if (!projectData.isInstructionsCoverageEnabled()) return;
    final ClassInstructions oldInstructions = projectData.getInstructions().get(sourceClass.getName());
    final LineInstructions[] oldLines = oldInstructions == null ? null : oldInstructions.getlines();
    if (sourceClass == targetClass && (oldLines == null || oldLines.length == 0)) return;
    final LineInstructions[] sourceLines = getLinesArray(linesMap, sourceClass, oldLines, targetClass);
    final LineInstructions[] targetLines = projectData.getInstructions().get(targetClass.getName()).getlines();
    for (final LineMapData mapData : linesMap) {
      if (mapData == null) continue;
      final int sourceLineNumber = mapData.getSourceLineNumber();
      if (ArrayUtil.safeLoad(sourceLines, sourceLineNumber) == null) {
        if (ArrayUtil.safeLoad(targetLines, mapData.getTargetMinLine()) != null) {
          ArrayUtil.safeStore(sourceLines, sourceLineNumber, new LineInstructions());
        }
      }
      for (int targetLineNumber = mapData.getTargetMinLine(); targetLineNumber <= mapData.getTargetMaxLine(); targetLineNumber++) {
        final LineInstructions source = ArrayUtil.safeLoad(sourceLines, sourceLineNumber);
        final LineInstructions target = ArrayUtil.safeLoad(targetLines, targetLineNumber);
        if (target == null) continue;
        if (source != null) {
          source.merge(target);
        }
        if (sourceClass != targetClass || sourceLineNumber != targetLineNumber) {
          targetLines[targetLineNumber] = null;
        }
      }
    }
    projectData.getInstructions().put(sourceClass.getName(), new ClassInstructions(sourceLines));
  }

  private static LineInstructions[] getLinesArray(LineMapData[] linesMap,
                                                  ClassData sourceClass, LineInstructions[] oldLines,
                                                  ClassData targetClass) {
    if (targetClass == sourceClass) return oldLines;
    final int newLength = ClassData.maxSourceLineNumber(linesMap) + 1;
    if (oldLines == null || oldLines.length == 0) {
      return new LineInstructions[newLength];
    } else if (oldLines.length >= newLength) {
      return oldLines;
    } else {
      final LineInstructions[] sourceLines = new LineInstructions[newLength];
      System.arraycopy(oldLines, 0, sourceLines, 0, oldLines.length);
      return sourceLines;
    }
  }

  /**
   * Remove all lines that are generated by inline.
   * Do not touch lines that are mapped to itself.
   */
  public static void dropMappedLines(ProjectData projectData, String className, FileMapData[] mappings) {
    if (!projectData.isInstructionsCoverageEnabled()) return;
    final ClassInstructions classInstructions = projectData.getInstructions().get(className);
    final LineInstructions[] instructions = classInstructions.getlines();
    for (FileMapData mapData : mappings) {
      final boolean isThisClass = className.equals(mapData.getClassName());
      for (LineMapData lineMapData : mapData.getLines()) {
        final int sourceLineNumber = lineMapData.getSourceLineNumber();
        for (int i = lineMapData.getTargetMinLine(); i <= lineMapData.getTargetMaxLine() && i < instructions.length; i++) {
          if (isThisClass && i == sourceLineNumber) continue;
          instructions[i] = null;
        }
      }
    }
  }
}
