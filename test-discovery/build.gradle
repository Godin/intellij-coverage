/*
 * Copyright 2000-2019 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

dependencies {
  implementation project(':util')

  testImplementation 'junit:junit:4.13.1'
  testImplementation 'org.assertj:assertj-core:3.9.1'
}

sourceSets {
  test.java.srcDirs = [file('test')]
}

jar {
  baseName = test_discovery_jar_name
  destinationDir = file("../dist")
  manifest.attributes(
      "Premain-Class": "com.intellij.rt.coverage.testDiscovery.main.TestDiscoveryPremain",
      "Boot-Class-Path": "$archiveName",
      "Can-Retransform-Classes": "true",

  )
  from(sourceSets.main.output)
  from(["util", "common"].collect({ project(":$it").sourceSets.main.output }))
  with repackLibs
}

task soursesJar(type: Jar, dependsOn: classes) {
  baseName = test_discovery_jar_name
  archiveClassifier = 'sources'
  from(sourceSets.main.allSource)
  from(["util", "common", "test-discovery"].collect({ project(":$it").sourceSets.main.allSource }))
}

task allJavadoc(type: Javadoc) {
  options.tags = [ "noinspection" ]
  source = ["util", "common", "test-discovery"].collect { project(":$it").sourceSets.main.allSource }
  classpath = files(["util", "common", "test-discovery"].collect { project(":$it").sourceSets.main.compileClasspath })
}

task javadocJar(type: Jar) {
  baseName = test_discovery_jar_name
  archiveClassifier = 'javadoc'
  from allJavadoc
}

apply from: 'jmh.gradle'