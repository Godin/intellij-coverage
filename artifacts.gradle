/*
 * Copyright 2000-2018 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

ext.agentsGroupId = 'org.jetbrains.intellij.deps'

class MyDependency {
  String group
  String name
  String version

  MyDependency(group, name, version) {
    this.group = group
    this.name = name
    this.version = version
  }
}

private addDependencies(publication, dependencyList) {
  publication.pom.withXml {
    def dependencies = asNode().appendNode('dependencies')
    dependencyList.each {
      def dependency = dependencies.appendNode('dependency')
      dependency.appendNode('groupId', it.group)
      dependency.appendNode('artifactId', it.name)
      dependency.appendNode('version', it.version)
    }
  }
}

private setMavenMetadata(publication, publicationName, publicationDescription) {
  publication.pom {
    name = publicationName
    description = publicationDescription
    url = 'https://github.com/JetBrains/intellij-coverage'
    licenses {
      license {
        name = 'Apache License, Version 2.0'
        url = 'https://www.apache.org/licenses/LICENSE-2.0'
      }
    }
    developers {
      developer {
        id = 'JetBrains'
        name = 'JetBrains Team'
        organization = 'JetBrains'
        organizationUrl = 'https://www.jetbrains.com'
      }
    }
    scm {
      connection = 'scm:git:git@github.com:JetBrains/intellij-coverage.git'
      developerConnection = 'scm:git:ssh:github.com/JetBrains/intellij-coverage.git'
      url = 'https://github.com/JetBrains/intellij-coverage'
    }
  }
}

def setUpPublication(String projectName, String artifactName, String name, String description, Closure addDependencies = null) {
  project(projectName).afterEvaluate { Project proj ->
    publishing {
      publications {
        "${projectName.replace(":", "-")}-"(MavenPublication) {
          group agentsGroupId
          artifactId artifactName
          version version
          artifact proj.jar
          artifact proj.tasks.getByName("soursesJar")
          artifact proj.tasks.getByName("javadocJar")

          if (addDependencies != null) addDependencies(it)

          setMavenMetadata(owner, name, description)
        }
      }
    }
  }
}

setUpPublication(":instrumentation", coverage_jar_name, "Intellij Coverage Agent", "Code coverage engine for JVM")
setUpPublication(":test-discovery", test_discovery_jar_name, "Intellij Test Discovery Agent", "Lightweight coverage during a testing session")
setUpPublication(":offline-runtime:api", offline_jar_name, "Intellij Coverage Offline Runtime", "Coverage runtime in offline instrumentation mode with API to collect coverage result at runtime")
setUpPublication(":reporter", reporter_jar_name, "Intellij Coverage Report", "Library for presenting coverage results") { publication ->
  def dependencies = project(":reporter").getPublishDependencies().collect { new MyDependency(it.moduleGroup, it.moduleName, it.moduleVersion) }
  dependencies.add(new MyDependency(agentsGroupId, coverage_jar_name, version))
  addDependencies(publication, dependencies)
}

ext.publishingUser = System.getenv('PUBLISHING_USER')
ext.publishingPassword = System.getenv('PUBLISHING_PASSWORD')

nexusPublishing {
  repositories {
    sonatype {
      username = rootProject.ext.publishingUser
      password = rootProject.ext.publishingPassword
    }
  }
}
