/*
 * Copyright 2000-2018 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

ext.agentsGroupId = 'org.jetbrains.intellij.deps'

private addDependencies(publication, dependencyList) {
  publication.pom.withXml {
    def dependencies = asNode().appendNode('dependencies')
    dependencyList.each {
      def dependency = dependencies.appendNode('dependency')
      dependency.appendNode('groupId', it.moduleGroup)
      dependency.appendNode('artifactId', it.moduleName)
      dependency.appendNode('version', it.moduleVersion)
    }
  }
}

private setMavenMetadata(publication, publicationName, publicationDescription) {
  publication.pom {
    name = publicationName
    description = publicationDescription
    url = 'https://github.com/JetBrains/intellij-coverage'
    licenses {
      license {
        name = 'Apache License, Version 2.0'
        url = 'https://www.apache.org/licenses/LICENSE-2.0'
      }
    }
    developers {
      developer {
        id = 'JetBrains'
        name = 'JetBrains Team'
        organization = 'JetBrains'
        organizationUrl = 'https://www.jetbrains.com'
      }
    }
    scm {
      connection = 'scm:git:git@github.com:JetBrains/intellij-coverage.git'
      developerConnection = 'scm:git:ssh:github.com/JetBrains/intellij-coverage.git'
      url = 'https://github.com/JetBrains/intellij-coverage'
    }
  }
}

project(":instrumentation").afterEvaluate { instrumentation ->
  publishing {
    publications {
      Coverage(MavenPublication) {
        group agentsGroupId
        artifactId coverage_jar_name
        version version
        artifact instrumentation.tasks.getByName("coverageAgentJar")
        artifact instrumentation.tasks.getByName("soursesJar")
        artifact instrumentation.tasks.getByName("javadocJar")
        setMavenMetadata(owner, "Intellij Coverage Agent", "Code coverage engine for JVM")
      }
    }
  }
}

project(":reporter").afterEvaluate { reporter ->
  publishing {
    publications {
      Reporter(MavenPublication) {
        group agentsGroupId
        artifactId reporter_jar_name
        version version
        artifact reporter.jar
        artifact reporter.tasks.getByName("soursesJar")
        artifact reporter.tasks.getByName("javadocJar")
        addDependencies(it, reporter.getPublishDependencies())
        setMavenMetadata(owner, "Intellij Coverage Report", "Library for presenting coverage results")
      }
    }
  }
}

project(":test-discovery").afterEvaluate { testDiscovery ->
  publishing {
    publications {
      TestDiscovery(MavenPublication) {
        group agentsGroupId
        artifactId test_discovery_jar_name
        version version
        artifact testDiscovery.jar
        artifact testDiscovery.tasks.getByName("soursesJar")
        artifact testDiscovery.tasks.getByName("javadocJar")
        setMavenMetadata(owner, "Intellij Test Discovery Agent", "Lightweight coverage during a testing session")
      }
    }
  }
}

project(":offline-runtime").afterEvaluate { offline ->
  publishing {
    publications {
      Offline(MavenPublication) {
        group agentsGroupId
        artifactId offline_jar_name
        version version
        artifact offline.jar
        artifact offline.tasks.getByName("soursesJar")
        artifact offline.tasks.getByName("javadocJar")
        setMavenMetadata(owner, "Intellij Coverage Offline Runtime", "Lightweight coverage runtime in offline instrumentation mode")
      }
    }
  }
}

ext.publishingUser = System.getenv('PUBLISHING_USER')
ext.publishingPassword = System.getenv('PUBLISHING_PASSWORD')

nexusPublishing {
  repositories {
    sonatype {
      username = rootProject.ext.publishingUser
      password = rootProject.ext.publishingPassword
    }
  }
}
