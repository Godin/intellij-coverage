import org.gradle.internal.jvm.Jvm

plugins {
  id 'org.jetbrains.kotlin.jvm'
  id 'org.jetbrains.kotlin.plugin.serialization' version '1.8.21'
}

sourceSets {
  main.java.srcDirs = []
  test.java.srcDirs 'src'
  test.resources.srcDir 'resources'
}

ext.testJdkVersion = Jvm.current().javaVersion >= JavaVersion.VERSION_11 &&
    (rootProject.hasProperty("test.configuration") ? "true" == project["test.configuration"] : false) ? "11" : "1.8"
sourceCompatibility = 1.8
targetCompatibility = testJdkVersion
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
  kotlinOptions {
    jvmTarget = testJdkVersion
  }
}

dependencies {
  testImplementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
  def coroutinesVersion = rootProject.hasProperty("kotlin.version") &&
      rootProject["kotlin.version"].startsWith("1.5") ? "1.5.2" : "1.6.4"
  testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion")
  testImplementation("org.jetbrains.kotlin:kotlin-reflect")
  testImplementation("org.jetbrains.kotlin:kotlin-test")
  testImplementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.5.1")

  testImplementation(files(project(":tests").sourceSets.test.output))

  testRuntimeOnly(files(project(':instrumentation').jar.archivePath))
  testRuntimeOnly(files(project(':offline-runtime:api').jar.archivePath))
  testCompileOnly(project(":instrumentation"))
  testCompileOnly(project(":offline-runtime:api"))

  testImplementation(project(":reporter"))
  testImplementation(project(":reporter:offline"))

  testImplementation(fileTree(project(":benchmarks").file("lib")))

  testImplementation('junit:junit:4.13.2')

  testImplementation("net.bytebuddy:byte-buddy:1.11.12")
  testImplementation("net.bytebuddy:byte-buddy-agent:1.11.12")

  testImplementation("org.jmockit:jmockit:1.49")
  testCompileOnly('org.projectlombok:lombok:1.18.24')
  testAnnotationProcessor('org.projectlombok:lombok:1.18.24')
}

task generateTests(type: JavaExec) {
  group = "verification"
  description = "Generate tests"
  classpath = sourceSets.test.runtimeClasspath
  main = "com.intellij.rt.coverage.TestGenerationKt"
}

def configureTests(Test task) {
  def kotlinVersion = project.hasProperty("kotlin.version") ? (String)project["kotlin.version"] : ""
  println "Use Kotlin version $kotlinVersion and java version ${testJdkVersion}"
  task.with {
    group = "verification"
    exclude("testData/**")
    if (project.hasProperty("fast.tests") && project["fast.tests"] == "true") {
      jvmArgs("-Dcoverage.run.fast.tests=true")
    }
    if (rootProject.hasProperty("parallel.tests")) {
      maxParallelForks = Math.min(2, Runtime.getRuntime().availableProcessors())
    }
  }
}

test {
  configureTests(it)
}

// These tests should pass for different kotlin compiler versions
task lineStatusTests(type: Test) {
  configureTests(it)
  filter {
    includeTestsMatching("com.intellij.rt.coverage.CoverageRunTest")
    excludeTestsMatching("com.intellij.rt.coverage.CoverageRunTest.testThreadSafeStructure")
    includeTestsMatching("com.intellij.rt.coverage.caseTests.LineSignatureTest")
    includeTestsMatching("com.intellij.rt.coverage.caseTests.OfflineInstrumentationTest")
  }
}
